@model intrapp.Models.MatchBreakdown
@using intrapp.Extensions.String
<div style="margin-top: 20px;"></div>
<!--Tabs-->
<ul class="nav nav-tabs" style="margin-bottom: 10px;">
    <li class="nav-item">
        <a id="overviewLink_@Model.GameId" class="nav-link active" onclick="ShowOverview(@Model.GameId)">Overview</a>
    </li>
    <li class="nav-item">
        <a id="analysisLink_@Model.GameId" class="nav-link" onclick="ShowAnalysis(@Model.GameId)">Analysis</a>
    </li>
    <li class="nav-item">
        <a id="buildLink_@Model.GameId" class="nav-link" onclick="ShowBuild(@Model.GameId)">Build</a>
    </li>
</ul>
<!--Overview-->
<div id="overview_@Model.GameId">
    @foreach (var team in Model.ParticipantsForDisplayByTeam)
    {
        <div class="col-md-12">
            <div class="titles-row">
                <div class="title-summoner">
                    Summoner
                </div>
                <div class="title-kda">
                    KDA
                </div>
                <div class="title-damage">
                    Damage
                </div>
                <div class="title-wards">
                    Wards
                </div>
                <div class="title-cs">
                    CS
                </div>
                <div class="title-items">
                    Items
                </div>
            </div>
            @foreach (var participant in team)
            {
                <div class="summoner-data-row">
                        <div class="summoner-images-container">
                            <img src="@participant.ChampionIconUrl" alt="Image unavailable" height="40" width="40" />
                            <img class="summoner-spell-one-breakdown" src="@participant.SummonerSpell1IconUrl" alt="Image unavailable" height="18" width="18" />
                            <img class="summoner-spell-two-breakdown" src="@participant.SummonerSpell2IconUrl" alt="Image unavailable" height="18" width="18" />
                            <img class="keystone-breakdown" src="@participant.RuneKeystoneIconUrl" alt="Image unavailable" height="18" width="18" />
                            <img class="secondary-path-breakdown" src="@participant.RuneSecondaryPathIconUrl" alt="Image unavailable" height="18" width="18" />
                            <span class="summoner-name-breakdown">@participant.ParticipantIdentity.Player.SummonerName.Truncate(150)</span>
                        </div>
                        <div class="kda-container">
                            @{
                                var kills = participant.Participant.Stats.Kills;
                                var deaths = participant.Participant.Stats.Deaths;
                                var assists = participant.Participant.Stats.Assists;

                                var kda = Math.Round((double)(kills + assists) / deaths, 2);
                            }
                            @participant.Participant.Stats.Kills/@participant.Participant.Stats.Deaths/@participant.Participant.Stats.Assists<br />
                            @(kda):1
                        </div>
                        <div class="damage-dealt-container">
                            @{
                                var raw = (double)participant.Participant.Stats.TotalDamageDealtToChampions / Model.HighestDamageDealtToChampionsByAParticipant;
                                var percentageDmgDealt = (int)Math.Round(raw * 100);
                            }
                            <div style="text-align:center;">@participant.Participant.Stats.TotalDamageDealtToChampions</div>
                            <div class="damage-dealt-max">
                                <div class="damage-dealt" style="width: @percentageDmgDealt%;"></div>
                            </div>
                        </div>
                        <div class="wards-container">
                            <div class="wards-tooltip">
                                <span class="wards-tooltip-text">
                                    @participant.Participant.Stats.VisionWardsBoughtInGame Control Wards<br />
                                    Wards placed: @participant.Participant.Stats.WardsPlaced<br />
                                    Wards killed: @participant.Participant.Stats.WardsKilled
                                </span>
                                @participant.Participant.Stats.VisionWardsBoughtInGame<br />
                                @participant.Participant.Stats.WardsPlaced / @participant.Participant.Stats.WardsKilled
                            </div>
                        </div>
                        <div class="creep-score-container">
                            <span>@participant.Participant.Stats.TotalMinionsKilled</span><br />
                            <span style="font-size: 12px;">@Math.Round(participant.Participant.Stats.TotalMinionsKilled / TimeSpan.FromSeconds(Model.GameDuration).TotalMinutes, 1)/min</span>
                        </div>
                        <div class="items-container">
                            <div style="margin-top: 5px; text-align: center; margin-left: auto; margin-right: auto;">
                                <img class="league-item-breakdown" src="@participant.Items.Item0Url" alt="Image unavailable" height="35" width="35" />
                                <img class="league-item-breakdown" src="@participant.Items.Item1Url" alt="Image unavailable" height="35" width="35" />
                                <img class="league-item-breakdown" src="@participant.Items.Item2Url" alt="Image unavailable" height="35" width="35" />
                                <img class="league-item-breakdown" src="@participant.Items.Item3Url" alt="Image unavailable" height="35" width="35" />
                                <img class="league-item-breakdown" src="@participant.Items.Item4Url" alt="Image unavailable" height="35" width="35" />
                                <img class="league-item-breakdown" src="@participant.Items.Item5Url" alt="Image unavailable" height="35" width="35" />
                                <img class="league-item-breakdown" src="@participant.Items.Item6Url" alt="Image unavailable" height="35" width="35" />
                            </div>
                        </div>
                </div>
            }
            @if (team.Key == 100)
            {
                <div class="col-md-12" style="margin-top: 20px; margin-bottom: 20px;">
                    <div class="row">
                        <div class="col-md-2" style="display: flex; justify-content:center; align-items: center;">
                            @Model.TeamsBreakdown.BlueTeamBaronKills / @Model.TeamsBreakdown.BlueTeamDragonKills / @Model.TeamsBreakdown.BlueTeamTowerKills
                        </div>
                        <div class="col-md-8">
                            <div class="game-kills-container">
                                <div class="total-kills-text">Total Kills</div>
                                <div class="blue-team-kills">@Model.TeamsBreakdown.BlueTeamChampionKills</div>
                                <div class="game-kills-blue-team-bar" style="flex: @Model.TeamsBreakdown.BlueTeamChampionKills;"></div>
                                <div class="game-kills-red-team-bar" style="flex: @Model.TeamsBreakdown.RedTeamChampionKills;"></div>
                                <div class="red-team-kills"> @Model.TeamsBreakdown.RedTeamChampionKills</div>

                            </div>
                            <div class="game-gold-container">
                                <div class="total-gold-text">Total gold</div>
                                <div class="blue-team-gold">@Model.TeamsBreakdown.BlueTeamGold</div>
                                <div class="game-gold-blue-team-bar" style="flex: @Model.TeamsBreakdown.BlueTeamGold;"></div>
                                <div class="game-gold-red-team-bar" style="flex: @Model.TeamsBreakdown.RedTeamGold;"></div>
                                <div class="red-team-gold">@Model.TeamsBreakdown.RedTeamGold</div>
                            </div>
                        </div>
                        <div class="col-md-2" style="display: flex; justify-content:center; align-items: center;">
                            @Model.TeamsBreakdown.RedTeamBaronKills / @Model.TeamsBreakdown.RedTeamDragonKills / @Model.TeamsBreakdown.RedTeamTowerKills
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!--Analysis-->
<div id="analysis_@Model.GameId" style="display: none;">
    <ul style="overflow: hidden; list-style: none; padding: 0;">
        <!--Champion Kills-->
        <li class="analysis-list-item">
            <div class="analysis-item-content">
                <h4>Champion Kills</h4>
                <div class="analysis-table">
                    @foreach (var team in Model.ParticipantsForDisplayByTeam)
                    {
                        <div class="analysis-team">
                            <ul style="margin: 0; padding: 0; list-style: none;">
                                @foreach (var participant in team)
                                {
                                    var raw = (double)participant.Participant.Stats.Kills / Model.HighestChampionKillsByAParticipant;
                                    var champKillsPercentage = Math.Round(raw * 100, 1);
                                    <li style="margin-top: 5px;">
                                        <div class="analysis-champion-image">
                                            <img src="@participant.ChampionIconUrl" alt="" />
                                        </div>
                                        <div class="analysis-progress">
                                            <div class="@(team.Key == 100 ? "analysis-progress-bar-blue-team" : "analysis-progress-bar-red-team")" style="width: @champKillsPercentage.ToString(System.Globalization.CultureInfo.InvariantCulture)%;"></div>
                                            <span class="analysis-progress-span">@participant.Participant.Stats.Kills</span>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                        if (team.Key == 100)
                        {
                            var totalKills = Model.TeamsBreakdown.BlueTeamChampionKills + Model.TeamsBreakdown.RedTeamChampionKills;
                            var circleCoveredArea = Math.Round(((double)Model.TeamsBreakdown.RedTeamChampionKills / totalKills) * 100, 0);
                            var circleBlankArea = 100 - circleCoveredArea;
                            var bluePartDashOffset = 100 - circleCoveredArea + 25;
                            <div class="analysis-graph-container">
                                <svg width="75%" height="75%" viewBox="0 0 42 42">
                                    <circle cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#d05a53" stroke-width="3" stroke-dasharray="@circleCoveredArea @circleBlankArea" stroke-dashoffset="25"></circle>
                                    <circle cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#548dca" stroke-width="3" stroke-dasharray="@circleBlankArea @circleCoveredArea" stroke-dashoffset="@bluePartDashOffset"></circle>
                                </svg>
                                <div class="analysis-graph-text-container">
                                    <div class="analysis-graph-text-first">
                                        @Model.TeamsBreakdown.BlueTeamChampionKills
                                    </div>
                                    <div class="analysis-graph-text">
                                        @Model.TeamsBreakdown.RedTeamChampionKills
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </li>
        <!--Gold Earned-->
        <li class="analysis-list-item">
            <div class="analysis-item-content">
                <h4>Gold Earned</h4>
                <div class="analysis-table">
                    @foreach (var team in Model.ParticipantsForDisplayByTeam)
                    {
                        <div class="analysis-team">
                            <ul style="margin: 0; padding: 0; list-style: none;">
                                @foreach (var participant in team)
                                {
                                    var raw = (double)participant.Participant.Stats.GoldEarned / Model.HighestGoldEarnedAmountByAParticipant;
                                    var goldEarnedPercentage = Math.Round(raw * 100, 1);
                                    <li style="margin-top: 5px;">
                                        <div class="analysis-champion-image">
                                            <img src="@participant.ChampionIconUrl" alt="" />
                                        </div>
                                        <div class="analysis-progress">
                                            <div class="@(team.Key == 100 ? "analysis-progress-bar-blue-team" : "analysis-progress-bar-red-team")" style="width: @goldEarnedPercentage.ToString(System.Globalization.CultureInfo.InvariantCulture)%;"></div>
                                            <span class="analysis-progress-span">@participant.Participant.Stats.GoldEarned</span>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                        if (team.Key == 100)
                        {
                            var totalGold = Model.TeamsBreakdown.BlueTeamGold + Model.TeamsBreakdown.RedTeamGold;
                            var circleCoveredArea = Math.Round(((double)Model.TeamsBreakdown.RedTeamGold / totalGold) * 100, 0);
                            var circleBlankArea = 100 - circleCoveredArea;
                            var bluePartDashOffset = 100 - circleCoveredArea + 25;
                            <div class="analysis-graph-container">
                                <svg width="75%" height="75%" viewBox="0 0 42 42">
                                    <circle cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#d05a53" stroke-width="3" stroke-dasharray="@circleCoveredArea @circleBlankArea" stroke-dashoffset="25"></circle>
                                    <circle cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#548dca" stroke-width="3" stroke-dasharray="@circleBlankArea @circleCoveredArea" stroke-dashoffset="@bluePartDashOffset"></circle>
                                </svg>
                                <div class="analysis-graph-text-container">
                                    <div class="analysis-graph-text-first">
                                        @Model.TeamsBreakdown.BlueTeamGold
                                    </div>
                                    <div class="analysis-graph-text">
                                        @Model.TeamsBreakdown.RedTeamGold
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </li>
        <!--Damage Dealt-->
        <li class="analysis-list-item">
            <div class="analysis-item-content">
                <h4>Damage Dealt</h4>
                <div class="analysis-table">
                    @foreach (var team in Model.ParticipantsForDisplayByTeam)
                    {
                        <div class="analysis-team">
                            <ul style="margin: 0; padding: 0; list-style: none;">
                                @foreach (var participant in team)
                                {
                                    var raw = (double)participant.Participant.Stats.TotalDamageDealtToChampions / Model.HighestDamageDealtToChampionsByAParticipant;
                                    var dmgDealtPercentage = Math.Round(raw * 100, 1);
                                    <li style="margin-top: 5px;">
                                        <div class="analysis-champion-image">
                                            <img src="@participant.ChampionIconUrl" alt="" />
                                        </div>
                                        <div class="analysis-progress">
                                            <div class="@(team.Key == 100 ? "analysis-progress-bar-blue-team" : "analysis-progress-bar-red-team")" style="width: @dmgDealtPercentage.ToString(System.Globalization.CultureInfo.InvariantCulture)%;"></div>
                                            <span class="analysis-progress-span">@participant.Participant.Stats.TotalDamageDealtToChampions</span>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                        if (team.Key == 100)
                        {
                            var totalDmgDealt = Model.TeamsBreakdown.BlueTeamDmgDealt + Model.TeamsBreakdown.RedTeamDmgDealt;
                            var circleCoveredArea = Math.Round(((double)Model.TeamsBreakdown.RedTeamDmgDealt / totalDmgDealt) * 100, 0);
                            var circleBlankArea = 100 - circleCoveredArea;
                            var bluePartDashOffset = 100 - circleCoveredArea + 25;
                            <div class="analysis-graph-container">
                                <svg width="75%" height="75%" viewBox="0 0 42 42">
                                    <circle cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#d05a53" stroke-width="3" stroke-dasharray="@circleCoveredArea @circleBlankArea" stroke-dashoffset="25"></circle>
                                    <circle cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#548dca" stroke-width="3" stroke-dasharray="@circleBlankArea @circleCoveredArea" stroke-dashoffset="@bluePartDashOffset"></circle>
                                </svg>
                                <div class="analysis-graph-text-container">
                                    <div class="analysis-graph-text-first">
                                        @Model.TeamsBreakdown.BlueTeamDmgDealt
                                    </div>
                                    <div class="analysis-graph-text">
                                        @Model.TeamsBreakdown.RedTeamDmgDealt
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </li>
        <!--Damage Taken-->
        <li class="analysis-list-item">
            <div class="analysis-item-content">
                <h4>Damage Taken</h4>
                <div class="analysis-table">
                    @foreach (var team in Model.ParticipantsForDisplayByTeam)
                    {
                        <div class="analysis-team">
                            <ul style="margin: 0; padding: 0; list-style: none;">
                                @foreach (var participant in team)
                                {
                                    var raw = (double)participant.Participant.Stats.TotalDamageTaken / Model.HighestDamageTakenByAParticipant;
                                    var dmgTakenPercentage = Math.Round(raw * 100, 1);
                                    <li style="margin-top: 5px;">
                                        <div class="analysis-champion-image">
                                            <img src="@participant.ChampionIconUrl" alt="" />
                                        </div>
                                        <div class="analysis-progress">
                                            <div class="@(team.Key == 100 ? "analysis-progress-bar-blue-team" : "analysis-progress-bar-red-team")" style="width: @dmgTakenPercentage.ToString(System.Globalization.CultureInfo.InvariantCulture)%;"></div>
                                            <span class="analysis-progress-span">@participant.Participant.Stats.TotalDamageTaken</span>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                        if (team.Key == 100)
                        {
                            var totalDmgTaken = Model.TeamsBreakdown.BlueTeamDmgTaken + Model.TeamsBreakdown.RedTeamDmgTaken;
                            var circleCoveredArea = Math.Round(((double)Model.TeamsBreakdown.RedTeamDmgTaken / totalDmgTaken) * 100, 0);
                            var circleBlankArea = 100 - circleCoveredArea;
                            var bluePartDashOffset = 100 - circleCoveredArea + 25;
                            <div class="analysis-graph-container">
                                <svg width="75%" height="75%" viewBox="0 0 42 42">
                                    <circle cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#d05a53" stroke-width="3" stroke-dasharray="@circleCoveredArea @circleBlankArea" stroke-dashoffset="25"></circle>
                                    <circle cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#548dca" stroke-width="3" stroke-dasharray="@circleBlankArea @circleCoveredArea" stroke-dashoffset="@bluePartDashOffset"></circle>
                                </svg>
                                <div class="analysis-graph-text-container">
                                    <div class="analysis-graph-text-first">
                                        @Model.TeamsBreakdown.BlueTeamDmgTaken
                                    </div>
                                    <div class="analysis-graph-text">
                                        @Model.TeamsBreakdown.RedTeamDmgTaken
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </li>
        <!--Wards Placed-->
        <li class="analysis-list-item">
            <div class="analysis-item-content">
                <h4>Wards Placed</h4>
                <div class="analysis-table">
                    @foreach (var team in Model.ParticipantsForDisplayByTeam)
                    {
                        <div class="analysis-team">
                            <ul style="margin: 0; padding: 0; list-style: none;">
                                @foreach (var participant in team)
                                {
                                    var raw = (double)participant.Participant.Stats.WardsPlaced / Model.HighestWardsPlacedByAParticipant;
                                    var wardsPlacedPercentage = Math.Round(raw * 100, 1);
                                    <li style="margin-top: 5px;">
                                        <div class="analysis-champion-image">
                                            <img src="@participant.ChampionIconUrl" alt="" />
                                        </div>
                                        <div class="analysis-progress">
                                            <div class="@(team.Key == 100 ? "analysis-progress-bar-blue-team" : "analysis-progress-bar-red-team")" style="width: @wardsPlacedPercentage.ToString(System.Globalization.CultureInfo.InvariantCulture)%;"></div>
                                            <span class="analysis-progress-span">@participant.Participant.Stats.WardsPlaced</span>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                        if (team.Key == 100)
                        {
                            var totalWards = Model.TeamsBreakdown.BlueTeamWardsPlaced + Model.TeamsBreakdown.RedTeamWardsPlaced;
                            var circleCoveredArea = Math.Round(((double)Model.TeamsBreakdown.RedTeamWardsPlaced / totalWards) * 100, 0);
                            var circleBlankArea = 100 - circleCoveredArea;
                            var bluePartDashOffset = 100 - circleCoveredArea + 25;
                            <div class="analysis-graph-container">
                                <svg width="75%" height="75%" viewBox="0 0 42 42">
                                    <circle cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#d05a53" stroke-width="3" stroke-dasharray="@circleCoveredArea @circleBlankArea" stroke-dashoffset="25"></circle>
                                    <circle cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#548dca" stroke-width="3" stroke-dasharray="@circleBlankArea @circleCoveredArea" stroke-dashoffset="@bluePartDashOffset"></circle>
                                </svg>
                                <div class="analysis-graph-text-container">
                                    <div class="analysis-graph-text-first">
                                        @Model.TeamsBreakdown.BlueTeamWardsPlaced
                                    </div>
                                    <div class="analysis-graph-text">
                                        @Model.TeamsBreakdown.RedTeamWardsPlaced
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </li>
        <!--Minions Killed-->
        <li class="analysis-list-item">
            <div class="analysis-item-content">
                <h4>Minions Killed</h4>
                <div class="analysis-table">
                    @foreach (var team in Model.ParticipantsForDisplayByTeam)
                    {
                        <div class="analysis-team">
                            <ul style="margin: 0; padding: 0; list-style: none;">
                                @foreach (var participant in team)
                                {
                                    var raw = (double)participant.Participant.Stats.TotalMinionsKilled / Model.HighestCreepScoreByAParticipant;
                                    var csPercentage = Math.Round(raw * 100, 1);
                                    <li style="margin-top: 5px;">
                                        <div class="analysis-champion-image">
                                            <img src="@participant.ChampionIconUrl" alt="" />
                                        </div>
                                        <div class="analysis-progress">
                                            <div class="@(team.Key == 100 ? "analysis-progress-bar-blue-team" : "analysis-progress-bar-red-team")" style="width: @csPercentage.ToString(System.Globalization.CultureInfo.InvariantCulture)%;"></div>
                                            <span class="analysis-progress-span">@participant.Participant.Stats.TotalMinionsKilled</span>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                        if (team.Key == 100)
                        {
                            var totalCS = Model.TeamsBreakdown.BlueTeamCS + Model.TeamsBreakdown.RedTeamCS;
                            var circleCoveredArea = Math.Round(((double)Model.TeamsBreakdown.RedTeamCS / totalCS) * 100, 0);
                            var circleBlankArea = 100 - circleCoveredArea;
                            var bluePartDashOffset = 100 - circleCoveredArea + 25;
                            <div class="analysis-graph-container">
                                <svg width="75%" height="75%" viewBox="0 0 42 42">
                                    <circle cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#d05a53" stroke-width="3" stroke-dasharray="@circleCoveredArea @circleBlankArea" stroke-dashoffset="25"></circle>
                                    <circle cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#548dca" stroke-width="3" stroke-dasharray="@circleBlankArea @circleCoveredArea" stroke-dashoffset="@bluePartDashOffset"></circle>
                                </svg>
                                <div class="analysis-graph-text-container">
                                    <div class="analysis-graph-text-first">
                                        @Model.TeamsBreakdown.BlueTeamCS
                                    </div>
                                    <div class="analysis-graph-text">
                                        @Model.TeamsBreakdown.RedTeamCS
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </li>
    </ul>
</div>

<!--Build-->
<div id="build_@Model.GameId" style="display: none;">
    <div>
        <p>Build here!</p>
    </div>
</div>
